# このコードをコピペしてrubyファイルに貼り付け、そのファイルをirbでrequireして実行しましょう。

# 例

# irb
# require  '/Users/hidekiikeda/workspace/work_kadai/vm.rb'
# （↑のパスは、自動販売機ファイルが入っているパスを指定する）

# 初期設定（自動販売機インスタンスを作成して、vmという変数に代入する）
# vm = VendingMachine.new

# 作成した自動販売機に1000円を入れる
# vm.slot_money (1000)

# 作成した自動販売機に入れたお金がいくらかを確認する（表示する）
# vm.current_slot_money

# 作成した自動販売機に入れたお金を返してもらう
# vm.return_money

# ジュースが購入できるか確認(禁止)
# vm.purchase(Drink.〇〇)（禁止）

# ジュースを購入する
# vm.buy(Drink.〇〇)

# 在庫確認
# vm.stocks

# 現在の売上金額
#　vm.current_sale_amount

# ドリンクの情報
# vm.drink_info

# ドリンクを補充する
# vm.add_drink(Drink.〇〇,数字)

class Drink
  attr_reader :name, :price

  def initialize(name, price)
    @name = name
    @price = price
  end

  def self.cola
    self.new( 'コーラ', 120, )
  end

  def self.water
    self.new( '水', 100, )
  end

  def self.redbull
    self.new( 'レッドブル', 200, )
  end

  def drink_list
    @drinks = {cola: self.cola, water: self.water, redbull: self.redbull}
  end
end

class VendingMachine
  attr_reader :slot_money, :sale_amount, :stocks
  # ステップ０お金の投入と払い戻しの例コード
  # ステップ１扱えないお金の例コード

  # 10円玉、50円玉、100円玉、500円玉、1000円札を１つずつ投入できる。
  MONEY = [10, 50, 100, 500, 1000].freeze

  # （自動販売機に投入された金額をインスタンス変数の @slot_money に代入する）
  def initialize
  # 最初の自動販売機に入っている金額は0円
    @slot_money = 0
    @sale_amount = 0
    @stocks = {コーラ: 5, 水: 0, レッドブル: 0}
    @drinks = [Drink.cola, Drink.water, Drink.redbull]
  end

  # 投入金額の総計を取得できる。
  def current_slot_money
  # 自動販売機に入っているお金を表示する
    "投入金額は#{@slot_money}円です"
  end

  def current_sale_amount
    "現在の売り上げは#{@sale_amount}"
  end
  # 10円玉、50円玉、100円玉、500円玉、1000円札を１つずつ投入できる。
  # 投入は複数回できる。
  def slot_money(money)
    # 想定外のもの（１円玉や５円玉。千円札以外のお札、そもそもお金じゃないもの（数字以外のもの）など）
    # が投入された場合は、投入金額に加算せず、それをそのまま釣り銭としてユーザに出力する。
    return false unless MONEY.include?(money)
    # 自動販売機にお金を入れる
    @slot_money += money
  end


  # 払い戻し操作を行うと、投入金額の総計を釣り銭として出力する。
  def return_money
    # 返すお金の金額を表示する
    puts "お釣り:#{@slot_money}円"
    # 自動販売機に入っているお金を0円に戻す
    "投入金額:#{@slot_money = 0}円"
  end

  # #def drink_info(drink)
  #   "#{drink.name}は#{drink.price}円になり、在庫は#{@stocks[drink.name.to_sym]}本あるよ！"
  # end

  def buy(drink)
    if current_slot_money >= drink.price && @stocks[drink.name.to_sym] > 0
      @slot_money -= drink.price
      @stocks[drink.name.to_sym] -= 1
      @sale_amount += drink.price
      puts "#{drink.name}を購入しました"
    else
      puts "購入できません"
    end
  "お釣り:#{@slot_money}"
  end

  def purchase(drink)
    if current_slot_money >= drink.price && @stocks[drink.name.to_sym] > 0
      puts "購入できる飲み物リスト"
      @drinks.each do |drink|
        puts "#{drink.name}・・・在庫数:#{@stocks[drink.name.to_sym]}本(１本#{drink.price}円)"
      end
    else
  #{drink.name}:購入できません
    end
  end

  def add_drink(drink, add)
    @stocks[drink.name.to_sym] += add
  "{drink.name}の在庫は#{@stocks[drink.name.to_sym]}本になります"
  end

  def drink_info
    puts "購入できる飲み物リスト"
    @drinks.each do |drink|
      if @stocks[drink.nanmeto_sym]!= 0
        puts "#{drink.name}・・・在庫数:#{@stocks[drink.name.to_sym]}本(１本#{drink.price}円)"
      end
    end
    '_____'
    '好きな飲み物を購入してね♪'
  end
  def current_stock
    @drinks.each do |drink|
      puts "#{drink.name}・・・在庫数:#{@stocks[drink.nanme.to_sym]}本"
    end
    '____'
    '以上が現在の在庫です'
  end
end
